#!/usr/bin/env python
# pylint: disable=invalid-name
# pylint: enable=invalid-name
"""
Wrap simp_le CLI to make crons and automation easier
"""

import json
import os
import subprocess
import sys

_GENERATED_FILES = [
    "account_key.json", "fullchain.pem",
    "key.pem", "cert.pem", "chain.pem",
    "account_reg.json",
]

def create_certkey(output_dir):
    """
    Create the certkey.pem file which contains both the certificate and the
    server private key.
    """
    certkey_path = os.path.join(output_dir, "certkey.pem")
    input_files = [
        os.path.join(output_dir, "cert.pem"),
        os.path.join(output_dir, "key.pem")
    ]

    with open(certkey_path, "w") as fout:
        for fin_path in input_files:
            with open(fin_path, "r") as fin:
                for line in fin:
                    fout.write(line)

                    # simp_le does not write the terminator on the last line
                    if line[-1] != "\n":
                        fout.write("\n")

def generate_command(vhost, conf):
    """
    Return a simp_le command that will generate the certs for the given vhost.
    """
    command = [os.path.join(conf["dest"], "venv/bin/simp_le")]

    for domain in vhost["domains"]:
        command += ["-d", domain]

    command += ["--default_root", vhost["root"]]
    command += ["--email", conf["email"]]
    if 'extra_args' in vhost:
        command += vhost["extra_args"].strip().split(' ')

    for output_file in _GENERATED_FILES:
        command += ["-f", output_file]

    return command

def get_conf(conf_path):
    """Return the configuration object with email, vhosts and dest."""
    with open(conf_path, "r") as stream:
        return json.load(stream)


def main(argv):
    """App entry point."""
    conf = get_conf(argv[1])

    for vhost in conf["vhosts"]:
        cmd = generate_command(vhost, conf)
        # simp_le returns 1 when a renewal is not needed
        # to avoid getting loads of emails when this script is run from cron
        # ignore returncode == 1
        updated = True
        try:
            output = subprocess.check_output(cmd, cwd=vhost["output"],
                                             stderr=subprocess.STDOUT)
            print output
        except subprocess.CalledProcessError, err:
            if err.returncode != 1:
                print err.output
            if err.returncode == 1:
                updated = False
            if err.returncode >= 2:
                raise RuntimeError(
                    "Unable to generate certificates for " + vhost["domains"][0]
                )
                updated = False
        create_certkey(vhost["output"])
        if updated:
            if "update_action" in vhost:
                print "Certificate updated for (", ",".join(vhost["domains"]), ")"
                print "running ", vhost["update_action"]
                try:
                    output = subprocess.check_output(vhost["update_action"].split(" "), cwd=vhost["output"],
                                             stderr=subprocess.STDOUT)
                    print output
                except subprocess.CalledProcessError, err:
                    print "Update action failed:"
                    print err.output
                except OSError, err: # e.g. file not found
                    print "Update action failed:"
                    print err

if __name__ == "__main__":
    main(sys.argv)
